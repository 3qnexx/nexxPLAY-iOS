// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
// swift-module-flags: -target x86_64-apple-ios9.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name nexxPlay
import AVFoundation
import AVKit
import AdSupport
import CoreMedia
import CoreText
import Foundation
import GoogleInteractiveMediaAds
import ImageIO
import MediaPlayer
import NotificationCenter
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import WebKit
import WidgetKit
import os.log
@_exported import nexxPlay
import os
@available(iOS 14.0, *)
public struct NexxWidgetEntryView : SwiftUI.View {
  public var entry: nexxPlay.NexxWidgetProvider.Entry
  public init(entry: nexxPlay.NexxWidgetProvider.Entry)
  public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s8nexxPlay19NexxWidgetEntryViewV4bodyQrvp", 0) ðŸ¦¸
}
public enum NexxPlayOfflineDownloadState {
  case loading
  case loaded
  case error(Swift.Error)
  public var description: Swift.String {
    get
  }
}
public struct NexxWidgetData {
  public init(domain: Swift.String, deeplink: Swift.String, feedHash: Swift.String, feedSecret: Swift.String, config: nexxPlay.NexxWidgetConfiguration)
}
public func nexx_md5(string: Swift.String) -> Swift.String
extension UIColor {
  convenience public init?(hex: Swift.String)
}
public struct NexxWidgetEntry : WidgetKit.TimelineEntry {
  public let date: Foundation.Date
}
@objc @_inheritsConvenienceInitializers open class NexxPLAYNotifications : ObjectiveC.NSObject {
  @objc public static let Error: Swift.String
  @objc public static let StartPlayback: Swift.String
  @objc public static let StartPlay: Swift.String
  @objc public static let Play: Swift.String
  @objc public static let Pause: Swift.String
  @objc public static let Progress25: Swift.String
  @objc public static let Progress50: Swift.String
  @objc public static let Progress75: Swift.String
  @objc public static let Progress95: Swift.String
  @objc public static let Progress100: Swift.String
  @objc public static let EnterFullscreen: Swift.String
  @objc public static let ExitFullscreen: Swift.String
  @objc public static let Ended: Swift.String
  @objc public static let EndedAll: Swift.String
  @objc public static let PlayPos: Swift.String
  @objc public static let AdStarted: Swift.String
  @objc public static let AdEnded: Swift.String
  @objc public static let AdError: Swift.String
  @objc public static let AdCalled: Swift.String
  @objc public static let AdClicked: Swift.String
  @objc public static let AdResumed: Swift.String
  @objc public static let PayPreviewEnded: Swift.String
  @objc public static let MetaDataLoaded: Swift.String
  @objc public static let Mute: Swift.String
  @objc public static let Unmute: Swift.String
  @objc public static let Second: Swift.String
  @objc public static let Quarter: Swift.String
  @objc public static let Replay: Swift.String
  @objc public static let StartSession: Swift.String
  @objc public static let EnterPIP: Swift.String
  @objc public static let ExitPIP: Swift.String
  @objc public static let ExitRemote: Swift.String
  @objc public static let EnterRemote: Swift.String
  @objc public static let MainInteraction: Swift.String
  @objc public static let DownloadStarted: Swift.String
  @objc public static let DownloadProgress: Swift.String
  @objc public static let DownloadError: Swift.String
  @objc public static let DownloadSuccess: Swift.String
  @objc public static let PodcastURLSelected: Swift.String
  @objc public static let ShowHotspot: Swift.String
  @objc public static let PlayerAdded: Swift.String
  @objc public static let ChangeMedia: Swift.String
  @objc public static let ChangePlayPos: Swift.String
  @objc public static let ChangeMediaIntent: Swift.String
  @objc public static let ShowOverlay: Swift.String
  @objc public static let HideOverlay: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc open class NexxPLAYEnvironment : ObjectiveC.NSObject {
  @objc public var domain: Swift.String
  @objc public var sessionID: Swift.String
  @objc public var language: Swift.String?
  @objc public var userHash: Swift.String
  @objc public var affiliatePartner: Swift.Int
  @objc public var deliveryPartner: Swift.Int
  @objc public var contextReference: Swift.String
  @objc public var consentString: Swift.String
  @objc public var useSSL: Swift.Bool
  @objc public var trackingOptOuted: Swift.Bool
  @objc public var alwaysInFullscreen: Swift.Bool
  @objc public var showCloseButtonOnFullscreen: Swift.Bool
  @objc public var hideStatusbarOnFullscreen: Swift.Bool
  @objc public var openPodcastURLsDirectly: Swift.Bool
  unowned public var googleIMAReferenceViewController: UIKit.UIViewController?
  @objc convenience public init(dictionary: Foundation.NSDictionary)
  @objc public init(domain: Swift.String)
  @objc public init(domain: Swift.String, dictionary: [Swift.String : Any])
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class NexxPLAYConfiguration : ObjectiveC.NSObject {
  @objc public var dataMode: Swift.String
  @objc public var backgroundColor: UIKit.UIColor
  @objc public var titleColor: UIKit.UIColor?
  @objc public var subtitleColor: UIKit.UIColor?
  @objc public var seekbarColor: UIKit.UIColor?
  @objc public var loaderSkin: Swift.String
  @objc public var hidePrevNext: Swift.Int
  @objc public var autoPlay: Swift.Int
  @objc public var autoNext: Swift.Int
  @objc public var exitMode: Swift.String
  @objc public var titleMode: Swift.Int
  @objc public var menuMode: Swift.Int
  @objc public var captionMode: Swift.String
  @objc public var watermarkMode: Swift.Int
  @objc public var delay: Swift.Double
  @objc public var startPosition: Swift.Int
  @objc public var adProvider: Swift.String
  @objc public var adType: Swift.String
  @objc public var adPrerollURL: Swift.String
  @objc public var adMidrollURL: Swift.String
  @objc public var adPostrollURL: Swift.String
  @objc public var adBannerURL: Swift.String
  @objc public var adMidrollInterval: Swift.Int
  @objc public var adBannerInterval: Swift.Int
  @objc public var disableAds: Swift.Int
  @objc public var disablePrerolls: Swift.Int
  @objc public var disableMidrolls: Swift.Int
  @objc public var disablePostrolls: Swift.Int
  @objc public var disableBanners: Swift.Int
  @objc public var enableInteractions: Swift.Int
  @objc public var enableScenes: Swift.Int
  @objc public var enableSidebar: Swift.Int
  @objc public var enableAirPlay: Swift.Int
  @objc public var enableFullscreen: Swift.Int
  @objc public var enableAutoResume: Swift.Int
  @objc public var webURLReference: Swift.String
  @objc public var streamingFilter: Swift.String
  @objc public var startedVia: Swift.String
  @objc public var loadCustomAttributes: Swift.Int
  @objc public var forcePrevNext: Swift.Int
  @objc public var enableSeekingButtons: Swift.Int
  @objc public var playbackMode: Swift.String
  @objc public var disableErrorExit: Swift.Int
  @objc public var imageScaleMode: Swift.String
  @objc public var audioSkin: Swift.String
  @objc public var emitter: Swift.String
  @objc public var enableSystemMedia: Swift.String
  @objc convenience public init(dictionary: Foundation.NSDictionary)
  @objc override dynamic public init()
  public init(dictionary: [Swift.String : Any])
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class NexxPLAYView : UIKit.UIView {
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc deinit
  @objc open func setEnvironment(_ environment: nexxPlay.NexxPLAYEnvironment)
  @objc open func setConfiguration(_ configuration: nexxPlay.NexxPLAYConfiguration)
  @objc open func startPlay(streamType: Swift.String, mediaID: Swift.String, configuration: nexxPlay.NexxPLAYConfiguration)
  @objc open func startPlayWithGlobalID(globalID: Swift.String, configuration: nexxPlay.NexxPLAYConfiguration)
  @objc open func startPlayWithRemoteMedia(streamType: Swift.String, reference: Swift.String, provider: Swift.String, configuration: nexxPlay.NexxPLAYConfiguration)
  @objc open func play()
  @objc open func pause()
  @objc open func toggle()
  @objc open func mute()
  @objc open func unmute()
  @objc open func seekTo(_ time: Swift.Float)
  @objc open func seekBy(_ time: Swift.Float)
  @objc open func next()
  @objc open func previous()
  @objc open func swapToPosition(_ position: Swift.Int)
  @objc open func swapToMediaItem(mediaID: Swift.String, streamType: Swift.String? = nil, startPosition: Swift.Int = 0, delay: Swift.Double = 0, reason: Swift.String? = nil, showReturnButton: Swift.Bool = false)
  @objc open func swapToGlobalID(globalID: Swift.String, startPosition: Swift.Int = 0, delay: Swift.Double = 0, reason: Swift.String? = nil, showReturnButton: Swift.Bool = false)
  @objc open func swapToRemoteMedia(reference: Swift.String, streamType: Swift.String? = nil, provider: Swift.String, delay: Swift.Double = 0, reason: Swift.String? = nil, showReturnButton: Swift.Bool = false)
  @objc open func getMediaData() -> [Swift.String : Any]
  @objc open func getCaptionData(forLanguage language: Swift.String? = nil) -> [[Swift.String : Any]]?
  @objc open func getCurrentTime() -> Swift.Float
  @objc open func isPlaying() -> Swift.Bool
  @objc open func isPlayingAd() -> Swift.Bool
  @objc open func isMuted() -> Swift.Bool
  @objc open func isInPiP() -> Swift.Bool
  @objc open func clearCache()
  @objc open func checkPayment()
  @objc open func addObserverForAllNotifications(_ observer: Swift.AnyObject, selector: Swift.String)
  @objc open func removeObserverForAllNotifications(_ observer: Swift.AnyObject)
  @objc open func startDownloadLocalMedia(mediaID: Swift.String, streamType: Swift.String, provider: Swift.String? = nil)
  @objc open func listLocalMedia(streamType: Swift.String) -> [[Swift.String : Swift.String]]
  @objc open func hasDownloadOfLocalMedia(mediaID: Swift.String, streamType: Swift.String, provider: Swift.String? = nil) -> Swift.Bool
  @objc open func removeLocalMedia(mediaID: Swift.String, streamType: Swift.String, provider: Swift.String? = nil)
  @objc open func clearLocalMedia(streamType: Swift.String? = nil)
}
public struct NexxWidgetConfiguration {
  public init(appID: Swift.Int? = nil, language: Swift.String? = nil, slideUpdateInterval: Swift.Double? = nil, refreshIntervalMinutes: Swift.Double? = nil)
}
public struct NexxWidgetMedia : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @available(iOS 10.0, *)
open class NexxPLAYTodayView : UIKit.UIView, UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegateFlowLayout {
  @objc dynamic public init()
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  open func initializeView(withData widgetData: nexxPlay.NexxWidgetData, didSelectMedia: @escaping (nexxPlay.NexxWidgetMedia) -> ())
  open func widgetPerformUpdate(completionHandler: @escaping ((CoreGraphics.CGFloat?) -> Swift.Void))
  open func add(toView view: UIKit.UIView)
  @available(iOS 10.0, *)
  open func widgetActiveDisplayModeDidChange(_ activeDisplayModeRaw: Swift.Int, withMaximumSize maxSize: CoreGraphics.CGSize) -> CoreGraphics.CGSize
  @objc public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @objc public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Swift.Int) -> CoreGraphics.CGFloat
  @objc public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
  @objc public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @objc public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc deinit
}
@available(iOS 14.0, *)
public struct NexxWidgetProvider : WidgetKit.TimelineProvider {
  public typealias Entry = nexxPlay.NexxWidgetEntry
  public init(widgetData: nexxPlay.NexxWidgetData)
  public func placeholder(in context: nexxPlay.NexxWidgetProvider.Context) -> nexxPlay.NexxWidgetEntry
  public func getSnapshot(in context: nexxPlay.NexxWidgetProvider.Context, completion: @escaping (nexxPlay.NexxWidgetEntry) -> Swift.Void)
  public func getTimeline(in context: nexxPlay.NexxWidgetProvider.Context, completion: @escaping (WidgetKit.Timeline<nexxPlay.NexxWidgetEntry>) -> Swift.Void)
}
extension UIImage {
  public class func gifImageWithURL(_ gifUrl: Swift.String) -> UIKit.UIImage?
}
